/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Mangroves = ee.FeatureCollection("users/jeromemaiquez/Mangroves"),
    PagbilaoBay = 
    /* color: #c9ff9d */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[121.68049388901495, 14.004908534695298],
          [121.68049388901495, 13.872289627685424],
          [121.80477672592902, 13.872289627685424],
          [121.80477672592902, 14.004908534695298]]], null, false),
    PagbilaoBorder = ee.FeatureCollection("users/jeromemaiquez/PagbilaoBorder");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*--------SDM PRE-PROCESSING--------*/

// PART 1: Processing species data

  // Spatial thinning to limit effect sampling bias
  //Define spatial resolution to work with (in m)
var GrainSize = 1000; // 1 km
  //Remove duplicates and apply it to species dataset
function RemoveDuplicates(data){
  var randomraster = ee.Image.random().reproject('EPSG:4326', null, GrainSize);
  var randpointvals = randomraster.sampleRegions({collection: ee.FeatureCollection(data), scale: 10, geometries: true});
  return randpointvals.distinct('random');
}
var Data = RemoveDuplicates(Mangroves);

  //check no. points before & after thinning
print(ee.FeatureCollection(Mangroves).size())
print(Data.size()) // no. of points after thinning
 
 // Add two maps to the screen
var left = ui.Map();
var right = ui.Map();
ui.root.clear();
ui.root.add(left);
ui.root.add(right);

  // Link maps: when one is dragged, the other moves in sync
ui.Map.Linker([left, right], 'change-bounds');
 
  //Visualizing species data
var MangroveData = ee.FeatureCollection(Data)
//right.addLayer(MangroveData, {color: 'green'}, 'Mangrove Occurrence Points', true)
//left.addLayer(MangroveData, {color: 'green'}, 'Mangrove Occurrence Points', true)

// Part 2: Defining area of interest for SDM

  // 2 km buffer around species occurrences
var AOI = Data.geometry().bounds().buffer(2000);
  // Center each map to the area of interest
right.centerObject(AOI, 12);
left.centerObject(AOI, 12)
  
  // Add AOI borders to the map
var outline = ee.Image().byte().paint({
featureCollection: AOI, color: 1, width: 2});
//right.addLayer(outline, {palette: 'red'}, 'Study Area');
//left.addLayer(outline, {palette: 'red'}, 'Study Area');

// Part 3a: Selecting predictor variables

  // WorldClim BIO variables (a multiband image)
var climate = ee.Image('WORLDCLIM/V1/BIO');

  // SRTM elevation data and calculate slope, aspect, and hillshade
var Terrain = ee.Algorithms.Terrain(ee.Image("USGS/SRTMGL1_003"));

//   // [WIP] WWF hydrological terrain data to calculate TWI
// var HydroTerrain = ee.Algorithms.Terrain(ee.Image("WWF/HydroSHEDS/03CONDEM"));
// var TWI = HydroTerrain.log(HydroTerrain.select('b1').divide(HydroTerrain.select('slope')));

  // OpenLandMap clay content in soil
var clayContent = ee.Image("OpenLandMap/SOL/SOL_CLAY-WFRACTION_USDA-3A1A1A_M/v02");

 // OpenLandMap water content in soil at 33kPa
var waterContent = ee.Image("OpenLandMap/SOL/SOL_WATERCONTENT-33KPA_USDA-4B1C_M/v01");

// Part 3b. Spatial interpolation via kriging
    
  // Sample WorldClim & OpenLandMap surface at random points in AOI
var climateFc = climate.sample(
  {region: AOI, scale: 1000, numPixels: 50, geometries: true});
var clayContentFc = clayContent.sample(
  {region: AOI, scale: 1000, numPixels: 50, geometries: true});
var waterContentFc = waterContent.sample(
  {region: AOI, scale: 1000, numPixels: 50, geometries: true});      
    
  // Generate interpolated surface from points via kriging
    
    // Property 1: isothermality (BIO03)
var isothermImg = climateFc.kriging({
  propertyName: 'bio03',
  shape: 'gaussian',
  range: 2.8e6,
  sill: 164,
  nugget: 0.05,
  maxDistance: 1.8e5,
  reducer: ee.Reducer.mean()
}).clip(AOI);

    // Property 2: precipitation seasonality (BIO15)
var rainSznImg = climateFc.kriging({
  propertyName: 'bio15',
  shape: 'gaussian',
  range: 2.8e6,
  sill: 164,
  nugget: 0.05,
  maxDistance: 1.8e5,
  reducer: ee.Reducer.mean()
}).clip(AOI);

    // Property 3: clay content at 0 cm depth
var clayContentImg = clayContentFc.kriging({
  propertyName: 'b0',
  shape: 'gaussian',
  range: 2.8e6,
  sill: 164,
  nugget: 0.05,
  maxDistance: 1.8e5,
  reducer: ee.Reducer.mean()
}).clip(AOI);

    // Property 4: water content at 10 cm depth and 33 kPA
var waterContentImg = waterContentFc.kriging({
  propertyName: 'b10',
  shape: 'gaussian',
  range: 2.8e6,
  sill: 164,
  nugget: 0.05,
  maxDistance: 1.8e5,
  reducer: ee.Reducer.mean()
}).clip(AOI);

  // Combine bands into a single multi-band image
var predictors = isothermImg.addBands(rainSznImg).addBands(Terrain)
  .addBands(clayContentImg).addBands(waterContentImg);

  // Mask out ocean pixels from the predictor variable image
var watermask = Terrain.select('elevation').gt(0); // create a water mask
var predictors = predictors.updateMask(watermask).clip(AOI);

  // Select subset of bands to keep for SDM
var bands = ['bio03', 'bio15', 'b0', 'b10', 'elevation', 'slope'];
var predictors = predictors.select(bands);

  // Display layers on the map
//left.addLayer(predictors, {bands:['elevation'], min: -5, max: 400, palette: ['black', 'white']}, 'Elevation (m)', 0);
left.addLayer(predictors, {bands:['slope'], min: 0, max: 89.99, palette: ['black', 'white']}, 'Slope (m)');
// right.addLayer(predictors, {bands:['runoff'], min:0, max: 37}, 'Max Temp. of Warmest Month (degC)');
//right.addLayer(predictors, {bands:['bio01'], min:0, max: 265}, 'Max Temperature?');

// Part 4: Creating Pseudo-Absences

  // Make an image out of presence locations as mask.
    // The pixels with presence locations will be removed from area to generate pseudo-absences.
    // This will prevent having presence & pseudo-absence in the same pixel.
var mask = MangroveData.reduceToImage({
  properties: ['random'],
  reducer: ee.Reducer.first()
}).reproject('EPSG:4326', null, ee.Number(GrainSize)).mask().neq(1).selfMask();

  // Method 2: Pseudo-absences within buffer around presence points
// var buffer = 10000; // Distance in meters
// var AreaForPA = Data.geometry().buffer({distance: buffer, maxError: 1000});
// var AreaForPA = mask.clip(AreaForPA).updateMask(watermask).clip(AOI);
// right.addLayer(AreaForPA, {}, 'Area to create pseudo-absences', 0);

  // Method 3: Environmentally-profiled pseudo-absence selection
  
    // Extract environmental values for a random subset of presence data
var PixelVals = predictors.sampleRegions({collection: Data.randomColumn().sort('random').limit(200), properties: [], tileScale: 16, scale: GrainSize});
    // Perform k-means clustering and train it based on Euclidean distance
var clusterer = ee.Clusterer.wekaKMeans({nClusters: 2, distanceFunction: 'Euclidean'}).train(PixelVals);
    // Assign pixels to clusters using the trained clusterer
var clResult = predictors.cluster(clusterer);
    // Display cluster results and identify the cluster IDs for pixels (dis)similar to presence data
// right.addLayer(clResult.randomVisualizer(), {}, 'Clusters', 0);
    // Mask out pixels dissimilar to presence data
    // Obtain ID of cluster similar to presence data and use oppoiste cluster to define area for pseudo-absences
var clustID = clResult.sampleRegions({collection: Data.randomColumn().sort('random').limit(200), properties: [], tileScale: 16, scale: GrainSize});
clustID = ee.FeatureCollection(clustID).reduceColumns(ee.Reducer.mode(),['cluster']);
clustID = ee.Number(clustID.get('mode')).subtract(1).abs();
var mask2 = clResult.select(['cluster']).eq(clustID);
var AreaForPA = mask.updateMask(mask2).clip(AOI);

  // Display area for creation of pseudo-absence
// right.addLayer(AreaForPA, {}, 'Area to create pseudo-absences', 0);

// Part 5: Create grid for block-repeated split-sample cross validation

  // Define a function to create a grid over AOI
function makeGrid(geometry, scale){
      // pixelLonLat returns image with each pixel labeled 
      // with longitude and latitude values
    var lonLat = ee.Image.pixelLonLat();
      // select longitude and latitude bands, multiply by
      // large number, then truncate to integers.
    var lonGrid = lonLat.select('longitude').multiply(100000).toInt();
    var latGrid = lonLat.select('latitude').multiply(100000).toInt();
    return lonGrid.multiply(latGrid).reduceToVectors({
      geometry: geometry.buffer({distance: 1000, maxError: 1000}),
      scale: scale, // Buffer makes sure grid includes AOI borders
      geometryType: 'polygon'
    });
}

  // Create grid and remove cells outside AOI
var Scale = 1000; // Set in m to create spatial blocks
var grid = makeGrid(AOI, Scale);
var Grid = watermask.reduceRegions({collection: grid, reducer: ee.Reducer.mean()}).filter(ee.Filter.neq('mean', null));
// right.addLayer(Grid, {}, 'Grid for spatial block cross validation', 0);

/*----------MODEL FITTING & DISPLAY----------*/

// Part 1: Random seeds for spatial blocks and pseudo-absences

  // Define function to generate a vector of random numbers between 1 and 1000
function runif(length) {
    return Array.apply(null, Array(length)).map(function() {
        return Math.round(Math.random() * (1000 - 1) + 1)
    });
}

// Part 2: Defining SDM Function

  // Other algorithms are available in GEE
  // See ee.Classifiers for more info
  
function SDM(x){
  var Seed = ee.Number(x);
  
    // Randomly split blocks for training and validation
  var GRID = ee.FeatureCollection(Grid).randomColumn({seed: Seed}).sort('random');
  var TrainingGrid = GRID.filter(ee.Filter.lt('random', split)); // if random < split %, block is training
  var TestingGrid = GRID.filter(ee.Filter.gte('random', split)); // if random >= split%, block is testing
  
    // Presence Points
  var PresencePoints = MangroveData;
  PresencePoints = PresencePoints.map(function(feature){return feature.set('PresAbs', 1)});
  var TrainPresPoints = PresencePoints.filter(ee.Filter.bounds(TrainingGrid)); // filters presence pts into training
  var TestPresPoints = PresencePoints.filter(ee.Filter.bounds(TestingGrid)); // filters presence pts into testing
  
    // Pseudo-absences
    
      // Pseudo-absence points for TRAINING
  var TrainPsAbsPoints = AreaForPA.sample({region: TrainingGrid, scale: GrainSize, numPixels: TrainPresPoints.size().add(300), seed: Seed, geometries: true});
      // We add extra points to account for those landing in masked areas of raster and are thus discarded
      // This ensures a balanced ratio between presence and pseudo-absence data
  TrainPsAbsPoints = TrainPsAbsPoints.randomColumn().sort('random').limit(ee.Number(TrainPresPoints.size()));
      // Randomly retain same number of pseudo-absences as presence data
  TrainPsAbsPoints = TrainPsAbsPoints.map(function(feature){return feature.set('PresAbs', 0); });
  
      // Pseudo-absence points for TESTING
  var TestPsAbsPoints = AreaForPA.sample({region: TestingGrid, scale: GrainSize, numPixels: TestPresPoints.size().add(300), seed: Seed, geometries: true});
      // We add extra points to account for those landing in masked areas of raster and are thus discarded
      // This ensures a balanced ratio between presence and pseudo-absence data
  TestPsAbsPoints = TestPsAbsPoints.randomColumn().sort('random').limit(ee.Number(TestPresPoints.size()));
      // Randomly retain same number of pseudo-absences as presence data
  TestPsAbsPoints = TestPsAbsPoints.map(function(feature){return feature.set('PresAbs', 0); });
  
    // Merge presence and pseudo-absence points
  var trainingPartition = TrainPresPoints.merge(TrainPsAbsPoints);
  var testingPartition = TestPresPoints.merge(TestPsAbsPoints);
  
    // Extract local covariate values from multiband predictor image at training points
  var trainPixelVals = predictors.sampleRegions({collection: trainingPartition, properties: ['PresAbs'], scale: GrainSize, tileScale: 16, geometries: true});
  
    // CLASSIFY using RANDOM FOREST
  var Classifier = ee.Classifier.smileRandomForest({
    numberOfTrees: 500,      // Number of decision trees created
        
    variablesPerSplit: null, // Number of variables per split. 
        // If unspecified, uses square root of number of variables
    minLeafPopulation: 1,    // Only create nodes whose training set contains at least this many points.
        // Integer, default value: 1
    bagFraction: 0.5,        // Fraction of input to bag per tree.
       // Default value: 0.5
    maxNodes: null,          // Max number of leaf nodes per tree.
       // If unspecified, defaults to no limit
    seed: Seed               // Randomization seed
  });
  
    // Presence probability
  var ClassifierProb = Classifier.setOutputMode('PROBABILITY').train(trainPixelVals, 'PresAbs', bands);
  var ClassifiedImgProb = predictors.select(bands).classify(ClassifierProb);
  
    // Binary presence/absence map
  var ClassifierBin = Classifier.setOutputMode('CLASSIFICATION').train(trainPixelVals, 'PresAbs', bands);
  var ClassifiedImgBin = predictors.select(bands).classify(ClassifierBin);
  
  return ee.List([ClassifiedImgProb, ClassifiedImgBin, trainingPartition, testingPartition]);
}

// Part 3: Definition parameters & fitting the model

  // Define partition of training and testing data
var split = 0.70; // Proportion of blocks used as training data

  // Define number of repetitions
var numiter = 10;

  // Fit SDM
// var RanSeeds = runif(numiter);
// var results = ee.List(RanSeeds).map(SDM);
    // runif function can be used to generate random seeds
    // But we map SDM over assigned numbers for reproducibility
var results = ee.List([35, 68, 43, 54, 17, 46, 76, 88, 24, 12]).map(SDM);

  // Extract results from list
var results = results.flatten();
// print(results); // Activate this line to visualize all elements

// Part 4a: Displaying habitat suitability on map

  // Set visualization parameters
var visParams = {
  min: 0,
  max: 1,
  palette: ["#440154FF","#482677FF","#404788FF","#33638DFF","#287D8EFF",
  "#1F968BFF","#29AF7FFF","#55C667FF","#95D840FF","#DCE319FF"]
};

  // Extract all model predictions
var images = ee.List.sequence(0, ee.Number(numiter).multiply(4).subtract(1), 4).map(function(x){
  return results.get(x)});
  
  // You can add all indiv. model predictions to map
  // Number of layers added depends on no. of iterations selected
// left.addLayer(ee.Image(images.get(0)), visParams, 'Run 1');
// left.addLayer(ee.Image(images.get(1)), visParams, 'Run 2');

  // Calculate mean of all individual model runs
var ModelAverage = ee.ImageCollection.fromImages(images).mean();

  // Add final habitat suitability layer and presence locations to the map
left.addLayer(ModelAverage, visParams, 'Habitat Suitability');
left.addLayer(MangroveData, {color: 'red'}, 'Presence', 1);

  // Create legend for habitat suitability map.
var legend = ui.Panel({style: {position: 'bottom-left', padding: '8px 15px'}});

legend.add(ui.Label({
  value: "Habitat suitability",
  style: {fontWeight: 'bold', fontSize: '18px', margin: '0 0 4px 0', padding: '0px'}
}));

legend.add(ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: {
    bbox: [0,0,1,0.1],
    dimensions: '200x20',
    format: 'png',
    min: 0,
    max: 1,
    palette: ["#440154FF","#482677FF","#404788FF","#33638DFF","#287D8EFF",
  "#1F968BFF","#29AF7FFF","#55C667FF","#95D840FF","#DCE319FF"]
  },
  style: {stretch: 'horizontal', margin: '8px 8px', maxHeight: '40px'},
}));

legend.add(ui.Panel({
  widgets: [
    ui.Label('Low', {margin: '0px 0px', textAlign: 'left', stretch: 'horizontal'}),
    ui.Label('Medium', {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label('High', {margin: '0px 0px', textAlign: 'right', stretch: 'horizontal'}),
    ],layout: ui.Panel.Layout.Flow('horizontal')
}));

legend.add(ui.Panel(
  [ui.Label({value: "Presence locations",style: {fontWeight: 'bold', fontSize: '16px', margin: '4px 0 4px 0'}}),
   ui.Label({style:{color:"red",margin: '4px 0 0 4px'}, value:'◉'})],
  ui.Panel.Layout.Flow('horizontal')));

left.add(legend);

// Part 4b: Displaying distribution map
  
  // Extract all model predictions
var images2 = ee.List.sequence(1, ee.Number(numiter).multiply(4).subtract(1), 4).map(function(x){
  return results.get(x)});
  
  // Calculate mean of all individual model runs
var DistributionMap = ee.ImageCollection.fromImages(images2).mode();

  // Add final distribution map and presence locations to the map
right.addLayer(DistributionMap, {palette: ['white', 'green'], min: 0, max: 1}, 'Potential Distribution');
right.addLayer(MangroveData, {color: 'red'}, 'Presence', 1);

// Create legend for distribution map
var legend2 = ui.Panel({style: {position: 'bottom-left',padding: '8px 15px'}});
legend2.add(ui.Label({
  value: "Potential distribution map",
  style: {fontWeight: 'bold',fontSize: '18px',margin: '0 0 4px 0',padding: '0px'}
}));

var colors2 = ["green","white"];
var names2 = ['Presence', 'Absence'];
var entry2;
for (var x = 0; x<2; x++){
  entry2 = [
    ui.Label({style:{color:colors2[x],margin: '4px 0 4px 0'}, value:'██'}),
    ui.Label({value: names2[x],style: {margin: '4px 0 4px 4px'}})
  ];
  legend2.add(ui.Panel(entry2, ui.Panel.Layout.Flow('horizontal')));
}

legend2.add(ui.Panel(
  [ui.Label({value: "Presence locations",style: {fontWeight: 'bold', fontSize: '16px', margin: '0 0 4px 0'}}),
   ui.Label({style:{color:"red",margin: '0 0 4px 4px'}, value:'◉'})],
  ui.Panel.Layout.Flow('horizontal')));

right.add(legend2);

  // Adding distribution map with custom threshold
  // Deactivate upon resumption of toy model
// var DistributionMap2 = ModelAverage.gte(0.58);
// right.addLayer(DistributionMap2, {palette: ['white', 'green'], min: 0, max: 1}, 'Potential Distribution');
// right.addLayer(MangroveData, {color: 'red'}, 'Presence', 1);

/*----------MODEL VALIDATION---------*/

// Part 1: Checking against maps

  // Map 1: ee.ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global")
  // Map 2: arsetTrial (MVI map)